import { Meta } from '@storybook/blocks';
import * as PrismionPortsStories from './PrismionPorts.stories';

<Meta of={PrismionPortsStories} />

# PrismionPorts

Die `PrismionPorts` Komponente ist das Herzst√ºck der Prismion-Verbindungslogik. Sie stellt 4 interaktive Andockpunkte (Ports) bereit, die es Benutzern erm√∂glichen, neue Prismions zu erstellen oder Attachments an vorhandene Prismions anzuf√ºgen.

## Features

### üéØ **4 Andockpunkte**
- **Top Port**: Men√º f√§hrt nach oben aus (-170¬∞)
- **Right Port**: Men√º f√§hrt nach rechts aus (-80¬∞)
- **Bottom Port**: Men√º f√§hrt nach unten aus (10¬∞)
- **Left Port**: Men√º f√§hrt nach links aus (100¬∞)

### üé® **Hover-Effekte**
- Ports werden beim Hover √ºber die Prismion-Karte sichtbar
- Skalierung und Translation f√ºr visuelles Feedback
- Smooth Transitions mit CSS-Animationen

### üé™ **Radiale Men√ºs**
- 5 Aktionen pro Port: Prompt, Dokument, Bild, Video, Link
- Gestaffelte Einblendung der Icons (60ms Abstand)
- Richtungsbasierte Ausrichtung je nach Port-Position

### üîÑ **Intelligente Port-Wechsel**
- Erstes Men√º schlie√üt sich automatisch beim Klick auf anderen Port
- 150ms Verz√∂gerung f√ºr saubere √úberg√§nge
- Au√üenklick schlie√üt das aktive Men√º

## Props

| Prop | Type | Description |
|------|------|-------------|
| `className` | `string?` | Zus√§tzliche CSS-Klassen |
| `onConnectorClick` | `(port: PortSide, event: React.MouseEvent) => void?` | Callback f√ºr Port-Klicks |
| `onConnectorDrag` | `(port: PortSide, event: React.MouseEvent) => void?` | Callback f√ºr Port-Drag |
| `onCreatePrismion` | `(port: PortSide, type: 'prompt' \| 'file' \| 'image' \| 'video' \| 'link') => void?` | Callback f√ºr neue Prismions |
| `onAttachToExisting` | `(port: PortSide, type: 'file' \| 'image' \| 'video' \| 'link') => void?` | Callback f√ºr Attachments |

## Verwendung

```tsx
import { PrismionPorts } from '@/components/board/prismion-ports';

function MyPrismionCard() {
  return (
    <div className="relative w-80 h-60 bg-white rounded-lg group">
      {/* Prismion Content */}
      <div className="p-4">
        <h3>My Prismion</h3>
        <p>Content here...</p>
      </div>
      
      {/* Ports */}
      <PrismionPorts
        onCreatePrismion={(port, type) => {
          console.log(`Create ${type} from ${port} port`);
        }}
        onAttachToExisting={(port, type) => {
          console.log(`Attach ${type} to ${port} port`);
        }}
      />
    </div>
  );
}
```

## Aktionen

### üÜï **Neue Prismions erstellen**
- **Prompt**: Erstellt ein neues Prompt-Prismion
- **Dokument**: F√ºgt ein Dokument an das vorhandene Prismion an
- **Bild**: F√ºgt ein Bild an das vorhandene Prismion an
- **Video**: F√ºgt ein Video an das vorhandene Prismion an
- **Link**: F√ºgt einen Link an das vorhandene Prismion an

### üîó **Verbindungen herstellen**
- **Drag**: Ziehen Sie einen Port zu einer anderen Prismion-Karte
- **Click**: Klicken Sie auf einen Port f√ºr das radiale Men√º
- **Outside Click**: Klicken Sie au√üerhalb um das Men√º zu schlie√üen

## Animation-Details

### üé¨ **Gestaffelte Einblendung**
```css
transition-delay: ${idx * 0.06}s;
```
- Jedes Icon erscheint 60ms nach dem vorherigen
- Smooth Scale- und Opacity-√úberg√§nge
- 220ms Gesamtdauer f√ºr alle Icons

### üîÑ **Port-Wechsel**
```typescript
if (activePort && activePort !== side) {
  setActivePort(null);
  setTimeout(() => setActivePort(side), 150);
}
```
- Erstes Men√º schlie√üt sich sofort
- 150ms Pause f√ºr Schlie√ü-Animation
- Neues Men√º √∂ffnet sich mit Animation

### üéØ **Hover-Effekte**
```css
group-hover:scale-125 group-hover:-translate-y-6  /* Top */
group-hover:scale-125 group-hover:translate-x-6   /* Right */
group-hover:scale-125 group-hover:translate-y-6   /* Bottom */
group-hover:scale-125 group-hover:-translate-x-6  /* Left */
```

## Best Practices

### ‚úÖ **Do's**
- Verwenden Sie die Komponente innerhalb einer `group` CSS-Klasse
- Implementieren Sie beide Callbacks (`onCreatePrismion` und `onAttachToExisting`)
- Stellen Sie sicher, dass die Parent-Komponente `relative` positioning hat

### ‚ùå **Don'ts**
- √úberschreiben Sie nicht die Port-Positionen
- Verwenden Sie nicht mehrere `PrismionPorts` in derselben Karte
- Ignorieren Sie nicht die `onConnectorDrag` Callbacks f√ºr Drag-Funktionalit√§t

## Integration mit PrismionCard

Die `PrismionPorts` Komponente ist vollst√§ndig in `PrismionCard` integriert:

```tsx
// In PrismionCard
<PrismionPorts
  onConnectorClick={onConnectorClick}
  onConnectorDrag={onConnectorDrag}
  onCreatePrismion={onCreatePrismion}
  onAttachToExisting={onAttachToExisting}
/>
```

## Accessibility

- **Keyboard Navigation**: Ports sind √ºber Tab erreichbar
- **Screen Reader**: Alle Aktionen haben beschreibende Labels
- **Focus Management**: Fokus wird beim √ñffnen/Schlie√üen korrekt verwaltet
- **ARIA Labels**: Semantische Beschreibungen f√ºr alle Interaktionen

## Performance

- **Optimized Rendering**: Nur aktive Ports werden gerendert
- **Event Delegation**: Effiziente Event-Behandlung
- **CSS Transforms**: Hardware-beschleunigte Animationen
- **Memory Management**: Cleanup bei Component Unmount
